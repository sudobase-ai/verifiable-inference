from typing import Optional
import json

from click import command, option
from web3.auto import w3
from eth_account.messages import encode_defunct

from enclave.query import SignedQueryData

@command()
@option("--query", "-q", required=True, help = "The json file generated by the query")
@option("--address", "-a", help = "The expected signer address")
def main(query: str, address: Optional[str]) -> None:
    """
    Verify the signature on a query response.  Output the address of the
    signer.
    """

    with open(query, "r", encoding="utf-8") as f:
        signed_query: SignedQueryData = json.load(f)

    query_data_serialized = json.dumps(
        signed_query["query_data"],
        sort_keys=True,
        ensure_ascii=False
    )
    message = encode_defunct(text=query_data_serialized)

    recovered_address = w3.eth.account.recover_message(
        message,
        signature=signed_query["signature"]
    )
    if address:
        if address.lower() != recovered_address.lower():
            raise RuntimeError(
                f"Mismatch! Expected: {address}, Actual: {recovered_address}"
            )

    print(recovered_address)
